(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.BrowserDOM = factory());
}(this, (function () { 'use strict';

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function scrolled(trigger) {
    // Set if the window is scrolled
    return window.scrollY > trigger ? true : false;
  }
  var dir = undefined;
  var scrollCurrent;
  var scrollPrevious;
  function scrollDirection() {
    // Set if the window scroll up or down
    scrollCurrent > scrollPrevious ? dir = "down" : dir = "up"; // Update the scroll position

    scrollPrevious = scrollCurrent;
    scrollCurrent = window.scrollY;
    return window.scrollY > 1 ? dir : "top";
  }
  function scrollPosition() {
    var scrollArea = pageHeight() - document.documentElement.clientHeight;

    if (scrollArea > 1) {
      return window.scrollY;
    } else {
      return undefined;
    }
  }
  function scrollPercentage(currentScrollPosition) {
    var scrollArea = pageHeight() - document.documentElement.clientHeight;

    if (scrollArea > 1) {
      var _scrollPercentage = currentScrollPosition * 100 / scrollArea;

      return Math.round(_scrollPercentage);
    } else {
      return undefined;
    }
  }

  function pageHeight() {
    return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);
  }

  // Get the OS info
  function getOS () {
    if (navigator.appVersion.indexOf("Macintosh") != -1) return {
      name: "macos"
    };
    if (navigator.appVersion.indexOf("X11") != -1) return {
      name: "linux"
    };
    if (navigator.appVersion.indexOf("Windows") != -1) return {
      name: "windows"
    };
    if (navigator.appVersion.indexOf("iPhone") != -1) return {
      name: "ios"
    };
    if (navigator.appVersion.indexOf("iPad") != -1) return {
      name: "ios"
    };
    if (navigator.appVersion.indexOf("Android") != -1) return {
      name: "android"
    };
  }

  // Get the navigator info
  function getNavigator () {
    var versionInit;
    var browserName;
    var browserVersion; // Google Chrome

    if (navigator.vendor.indexOf("Google") !== -1 && navigator.appVersion.indexOf("Chrome") !== -1) {
      versionInit = navigator.appVersion.indexOf("Chrome") + 7;
      browserName = "chrome";
      browserVersion = navigator.appVersion.substring(versionInit, versionInit + 2);
      return {
        name: browserName,
        version: browserVersion
      };
    } // Safari


    if (navigator.vendor.indexOf("Apple") !== -1 && navigator.appVersion.indexOf("Safari") !== -1) {
      versionInit = navigator.appVersion.indexOf("Version") + 8;
      browserName = "safari";
      browserVersion = navigator.appVersion.substring(versionInit, versionInit + 2);
      return {
        name: browserName,
        version: browserVersion
      };
    } // Mozilla Firefox


    if (navigator.appCodeName == "Mozilla" && navigator.userAgent.indexOf("Firefox") !== -1) {
      versionInit = navigator.userAgent.indexOf("Firefox") + 8;
      browserName = "firefox";
      browserVersion = navigator.userAgent.substring(versionInit, versionInit + 2);
      return {
        name: browserName,
        version: browserVersion
      };
    } // Edge


    if (navigator.appVersion.indexOf("Edge") !== -1) {
      versionInit = navigator.appVersion.indexOf("Edge") + 5;
      browserName = "edge";
      browserVersion = navigator.appVersion.substring(versionInit, versionInit + 2);
      return {
        name: browserName,
        version: browserVersion
      };
    } // IE


    if (navigator.appVersion.indexOf("Trident") !== -1) {
      browserName = "ie";
      versionInit = navigator.appVersion.indexOf("Trident") + 8;
      var tridentVersion = navigator.appVersion.substring(versionInit, versionInit + 1);

      if (tridentVersion == 7) {
        browserVersion = 11;
      }

      if (tridentVersion == 6) {
        browserVersion = 10;
      }

      if (tridentVersion == 5) {
        browserVersion = 9;
      }

      return {
        name: browserName,
        version: browserVersion
      };
    } // Google Chrome emulating a device


    if (navigator.vendor.indexOf("Google Inc.") !== -1) {
      versionInit = navigator.appVersion.indexOf("Chrome") + 7;
      browserName = "chrome";
      browserVersion = navigator.appVersion.substring(versionInit, versionInit + 2);
      return {
        name: browserName,
        version: browserVersion
      };
    } // Other emulated devices


    versionInit = navigator.appVersion.slice(0, 4) + 10;
    browserName = "emulated";
    browserVersion = navigator.appVersion.substring(versionInit, versionInit + 2);
    return {
      name: browserName,
      version: browserVersion
    };
  }

  // Get the device type
  function touchDevice () {
    var touchscreen = "ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch;
    return touchscreen ? true : false;
  }

  function browserdom (customConfig) {
    var html = document.documentElement; // Config

    var defaultConfig = {
      os: false,
      browser: false,
      version: false,
      online: false,
      lang: false,
      touchDevice: false,
      scrolled: false,
      scrolledTrigger: 1,
      scrollDirection: false,
      scrollPosition: false,
      scrollPercentage: false
    };
    var config = buildConfig(customConfig);

    function buildConfig(custom) {
      return _extends(defaultConfig, custom);
    } // Browser object


    var data = {}; // Get OS, Device and Browser data

    (function staticData() {
      if (config.os) {
        data.os = getOS().name;
      }

      if (config.browser) {
        data.browser = getNavigator().name;
      }

      if (config.version) {
        data.version = getNavigator().version;
      }

      if (config.online) {
        data.online = navigator.onLine;
      }

      if (config.lang) {
        data.lang = navigator.language;
      }

      if (config.touchDevice) {
        data.touchDevice = touchDevice();
      }
    })(); // Get scroll info


    window.addEventListener("load", scrollData, false);
    window.addEventListener("scroll", scrollData, false);
    window.addEventListener("resize", scrollData, false);

    function scrollData() {
      if (config.scrolled) {
        data.scrolled = scrolled(config.scrolledTrigger);
      }

      if (config.scrollDirection) {
        data.scrollDirection = scrollDirection();
      }

      if (config.scrollPosition) {
        data.scrollPosition = scrollPosition();
      }

      if (config.scrollPercentage) {
        data.scrollPercentage = scrollPercentage(scrollPosition());
      }
    } // Get function


    this.get = function (prop) {
      return prop ? data[prop] : data;
    }; // Print function


    this.print = function () {
      if (data.os != undefined) html.dataset.os = data.os;
      if (data.browser != undefined) html.dataset.browser = data.browser;
      if (data.version != undefined) html.dataset.browserversion = data.version;
      if (data.online != undefined) html.dataset.online = data.online;
      if (data.lang != undefined) html.dataset.browserlang = data.lang;
      if (data.touchDevice != undefined) html.dataset.touchdevice = data.touchDevice;
      window.addEventListener("load", updateScroll, false);
      window.addEventListener("scroll", updateScroll, false);
      window.addEventListener("resize", updateScroll, false);

      function updateScroll() {
        if (data.scrolled != undefined) html.dataset.scrolled = data.scrolled;
        if (data.scrollDirection != undefined) html.dataset.scrolldirection = data.scrollDirection;
        if (data.scrollPosition != undefined) html.dataset.scrollposition = data.scrollPosition;
        if (data.scrollPercentage != undefined) html.dataset.scrollpercentage = data.scrollPercentage;
      }
    };
  }

  return browserdom;

})));
